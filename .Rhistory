sd(c(5,8,12))
which.min(c(4,1,6))
8*6
2^16
2^
8*6
8*10
sqrt(2)
abs(-65
)
abs(-65)
?sqrt
SquareRoot2=sqrt(2)
SquareRoot2
HoursYear <- 365*24
HoursYear
ls()
c(2,3,5,8,13)
country = c("Brazil","China","India","USA")
LifeExpectancy = c(74,76,65,83,79)
country
LifeExpectancy
Country = country
Country
c("Brazil","74","China","76")
Country[1]
LifeExpectancy[3]
Sequence = seq(1,100,2)
Sequence
Data = data.frame(country, LifeExpectancy)
Country = c("Brazil","China","India","Switzerland","USA")
Data = data.frame(country, LifeExpectancy)
Data = data.frame(Country, LifeExpectancy)
Data
Population = c(199000,1390000,1240000,7997,318000)
Data2 = cbind(Data,Population)
Data2
Country = c("Austrailia","Greece")
LifeExpectancy = c(82,81)
Population = c(23050, 11125)
NewData = data.fame(country,LifeExpectancy,Population)
NewData = data.frame(country,LifeExpectancy,Population)
NewData
NewData = data.frame(Country,LifeExpectancy,Population)
NewData
Data3 = rbind(Data2,NewData)
Data3
q()
getwd()
setwd("Github")
getwd()
getwd()
list.files()
setwd("ProgrammingAssignment2")
source('C:/Users/Matt/Desktop/cachevector.R')
source('C:/Users/Matt/Desktop/cachevector.R')
makeVector(C(3,4,5,6))
makeVector(3,4,5,6)
makeVector(3)
a <- makeVector(c(1,2,3))
makeVector(c(1,2,3))
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix(1:4,2)
makeCacheMatrix(matrix(1:4,2))
b<-makeCacheMatrix(matrix(1:4,2))
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
b<-makeCacheMatrix(matrix(1:4,2))
cacheSolve(b)
a$getInverse()
b$getInverse()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
b<-makeCacheMatrix(matrix(1:4,2))
b<-makeCacheMatrix(matrix(1:4,2))
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
b<-makeCacheMatrix(matrix(1:4,2))
b<-makeCacheMatrix(matrix(1:4,2))
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
b<-makeCacheMatrix(matrix(1:4,2))
b$getInverse()
b$getInverse(b)
b$get()
b<-makeCacheMatrix(matrix(1:4,2))
b$get()
b$getinverse()
b$set(matrix(5:8,2))
b$get(matrix(5:8,2))
b$get()
cacheSolve(b)
cacheSolve(b)
b$getInverse()
b$getinverse()
c = b$getInverse()
c = b$getinverse()
b$get() %*% c
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
x = rnorm(1000)
pos = rep(0,1000)
for(i in seq) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0
}
pos
pos
x = rnorm(1000)
pos = rep(0,1000)
pos
for(i in seq) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0
}
for(i in x) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0
}
for(i in 1:length(x)) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0
}
for(i in 1:length(x)) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0}
for(i in 1:length(x)) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0}
z
x
length(x)
1:length(x)
z<-rnorm(10)
v<-rep(0,10)
v
for(i in 1:length(z)) {
if(z[i] > 0) {
v[i] = 1
} else {
v[i] = 0
}
n<-for(i in 1:length(z)) {
if(z[i] > 0) {
v[i] = 1
} else {
v[i] = 0
}
z
for(i in 1:10 {
if(z[i] > 0) {
v[i] = 1
} else {
v[i] = 0
}
i=0
n<-for(i in 1:length(z)) {
if(z[i] > 0) {
v[i] = 1
} else {
v[i] = 0
}
for(i in 1:length(z)) {
if(z[i] > 0) {
v[i] = 1
} else {
v[i] = 0
}
bar = seq(1,200000, by=2)
bar.squared = rep(NA, 200000)
for (i in 1:length(bar) ) {
bar.squared[i] = bar[i]^2
}
for(i in 1:length(z)) {
if(z[i] > 0) {
v[i] = 1
} else {
v[i] = 0
}}
v
x = rnorm(1000)
pos = rep(0,1000)
for(i in seq) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0
}}
i=0
for(i in seq) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0
}}
for(i in length(x)) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0
}}
pos
for(i in 1:length(x)) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0
}}
rm(i)
for(i in 1:length(x)) {
if(x[i] > 0) {
pos[i] = 1
} else {
pos[i] = 0
}}
pos
